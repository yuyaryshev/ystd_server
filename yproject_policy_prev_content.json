{
    ".eslintignore": "# don't ever lint node_modules\r\nnode_modules\r\n# don't lint build output (make sure it's set to your correct build folder name)\r\ndist\r\nlib\r\n# don't lint nyc coverage output\r\ncoverage\r\n\r\nrollup.config.js\r\n",
    ".eslintrc.cjs": "module.exports = {\r\n    root: true,\r\n    parser: \"@typescript-eslint/parser\",\r\n    plugins: [\"@typescript-eslint\", \"eslint-plugin-tsdoc\", \"jsdoc\", \"eslint-plugin-import\", \"sonarjs\"],\r\n    extends: [\"eslint:recommended\", \"plugin:@typescript-eslint/recommended\", \"plugin:sonarjs/recommended\", \"prettier\"],\r\n    rules: {\r\n        \"no-undef\": 0,\r\n        \"no-prototype-builtins\": 0,\r\n        \"no-useless-escape\": 0,\r\n        \"no-empty\": 0,\r\n        \"no-constant-condition\": 0,\r\n        \"import/extensions\": [\r\n            \"error\",\r\n            \"ignorePackages\",\r\n            {\r\n                js: \"ignorePackages\",\r\n            },\r\n        ],\r\n        \"import/no-default-export\": 1,\r\n        \"@typescript-eslint/no-unused-vars\": 0,\r\n        \"@typescript-eslint/no-var-requires\": 0,\r\n        \"@typescript-eslint/explicit-module-boundary-types\": 0,\r\n        \"@typescript-eslint/ban-ts-comment\": 0,\r\n        \"@typescript-eslint/no-explicit-any\": 0,\r\n        \"@typescript-eslint/no-empty-interface\": 0,\r\n        \"@typescript-eslint/no-inferrable-types\": 0,\r\n        \"@typescript-eslint/no-non-null-assertion\": 0,\r\n        \"@typescript-eslint/no-empty-function\": 0,\r\n        \"@typescript-eslint/ban-types\": 0,\r\n        \"jsdoc/require-jsdoc\": 1,\r\n        \"jsdoc/require-description\": 1,\r\n        \"tsdoc/syntax\": 1,\r\n        // \"require-jsdoc\": [\"error\", {\r\n        //     \"require\": {\r\n        //         \"FunctionDeclaration\": true,\r\n        //         \"MethodDefinition\": true,\r\n        //         \"ClassDeclaration\": true,\r\n        //         \"ArrowFunctionExpression\": false,\r\n        //         \"FunctionExpression\": false\r\n        //     }\r\n        // }],\r\n        \"sonarjs/no-redundant-jump\": 1,\r\n        \"sonarjs/cognitive-complexity\": 0,\r\n    },\r\n};\r\n",
    ".gitignore": "# Logs\r\nlogs\r\n*.log\r\nnpm-debug.log*\r\nyarn-debug.log*\r\nyarn-error.log*\r\nlerna-debug.log*\r\n\r\n# Diagnostic reports (https://nodejs.org/api/report.html)\r\nreport.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json\r\n\r\n# Runtime data\r\npids\r\n*.pid\r\n*.seed\r\n*.pid.lock\r\n\r\n# Directory for instrumented libs generated by jscoverage/JSCover\r\nlib-cov\r\n\r\n# Coverage directory used by tools like istanbul\r\ncoverage\r\n*.lcov\r\n\r\n# nyc test coverage\r\n.nyc_output\r\n\r\n# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)\r\n.grunt\r\n\r\n# Bower dependency directory (https://bower.io/)\r\nbower_components\r\n\r\n# node-waf configuration\r\n.lock-wscript\r\n\r\n# Compiled binary addons (https://nodejs.org/api/addons.html)\r\nbuild/Release\r\n\r\n# Dependency directories\r\nnode_modules/\r\njspm_packages/\r\n\r\n# TypeScript v1 declaration files\r\ntypings/\r\n\r\n# TypeScript cache\r\n*.tsbuildinfo\r\n\r\n# Optional npm cache directory\r\n.npm\r\n\r\n# Optional eslint cache\r\n.eslintcache\r\n\r\n# Microbundle cache\r\n.rpt2_cache/\r\n.rts2_cache_cjs/\r\n.rts2_cache_es/\r\n.rts2_cache_umd/\r\n\r\n# Optional REPL history\r\n.node_repl_history\r\n\r\n# Output of 'npm pack'\r\n*.tgz\r\n\r\n# Yarn Integrity file\r\n.yarn-integrity\r\n\r\n# dotenv environment variables file\r\n.env\r\n.env.test\r\n\r\n# parcel-bundler cache (https://parceljs.org/)\r\n.cache\r\n\r\n# Next.js build output\r\n.next\r\n\r\n# Nuxt.js build / generate output\r\n.nuxt\r\ndist\r\nlib\r\nnode_modules\r\n/temp\r\n/docs\r\n\r\n# Gatsby files\r\n.cache/\r\n# Comment in the public line in if your project uses Gatsby and *not* Next.js\r\n# https://nextjs.org/blog/next-9-1#public-directory-support\r\n# public\r\n# vuepress build output\r\n.vuepress/dist\r\n\r\n# Serverless directories\r\n.serverless/\r\n\r\n# FuseBox cache\r\n.fusebox/\r\n\r\n# DynamoDB Local files\r\n.dynamodb/\r\n\r\n# TernJS port file\r\n.tern-port\r\n",
    ".pnpmfile.cjs": "// Put this file into your projects hastyData.\n// This will enable yarn's you package.json/restrictions for common use cases (not all!) cases.\n//\n// Author: Yuri Yaryshev, Moscow, Russia\n//\n// Unlicense\n//\n// This is free and unencumbered software released into the dist domain.\n// Any use of this file is hereby granted.\n// No warranty or obligations of any kind are provided by author.\n// http://unlicense.org/\n\nlet path = require(\"path\");\nlet fs = require(\"fs\");\n\nlet packageJson = JSON.parse(fs.readFileSync(\"package.json\", \"utf-8\"));\nlet resolutions = packageJson.resolutions;\nif (packageJson.plainDependencies)\n    {\n        resolutions = Object.assign(packageJson.dependencies, packageJson.devDependencies, packageJson.resolutions);\n    }\n\nif (packageJson.noResolution) for (let nr of packageJson.noResolution) delete resolutions[nr];\n\nif (resolutions && packageJson.resolutionStr)\n    for (let k in resolutions) if (!packageJson.resolutionStr.includes(k)) delete resolutions[k];\n\nlet resolutionsArray = [];\nfor (let k in resolutions) {\n    const r = resolutions[k];\n    resolutionsArray.push(`    ${k} ${r}`);\n}\nconsole.log(`Using pnpmfile resolutions\\n\\t`, resolutionsArray.join(\"\\n\"));\n\nmodule.exports = {\n    hooks: {\n        readPackage,\n    },\n};\n\nconst { ymultirepoRemap } = require(\"../local_packages_list\");\nfunction readPackage(p, context) {\n    //console.log(`in readPackage\\n${JSON.stringify(p, undefined, '    ')}\\n\\n\\n`);\n    //console.log(`context\\n${JSON.stringify(context, undefined, '    ')}\\n\\n\\n`);\n    ymultirepoRemap(p, context);\n    //    if (p.dependencies)\n    //        for (let k in p.dependencies) {\n    //            const override = resolutions[k];\n    //            //console.log(`        MAYBE overriden dependency ${k} ${p.dependencies[k]} -> ${override}, ${override && p.dependencies[k] !== override}`);\n    //            if (override && p.dependencies[k] !== override) {\n    //                console.log(`        overriden dependency ${k} ${p.dependencies[k]} -> ${override}`);\n    //                p.dependencies[k] = override;\n    //            }\n    //        }\n    return p;\n}\n",
    "api-extractor.json": "/**\r\n * Config file for API Extractor.  For more info, please visit: https://api-extractor.com\r\n */\r\n{\r\n  \"$schema\": \"https://developer.microsoft.com/json-schemas/api-extractor/v7/api-extractor.schema.json\",\r\n\r\n  /**\r\n   * Optionally specifies another JSON config file that this file extends from.  This provides a way for\r\n   * standard settings to be shared across multiple projects.\r\n   *\r\n   * If the path starts with \"./\" or \"../\", the path is resolved relative to the folder of the file that contains\r\n   * the \"extends\" field.  Otherwise, the first path segment is interpreted as an NPM package name, and will be\r\n   * resolved using NodeJS require().\r\n   *\r\n   * SUPPORTED TOKENS: none\r\n   * DEFAULT VALUE: \"\"\r\n   */\r\n  // \"extends\": \"./shared/api-extractor-base.json\"\r\n  // \"extends\": \"my-package/include/api-extractor-base.json\"\r\n\r\n  /**\r\n   * Determines the \"<projectFolder>\" token that can be used with other config file settings.  The project folder\r\n   * typically contains the tsconfig.json and package.json config files, but the path is user-defined.\r\n   *\r\n   * The path is resolved relative to the folder of the config file that contains the setting.\r\n   *\r\n   * The default value for \"projectFolder\" is the token \"<lookup>\", which means the folder is determined by traversing\r\n   * parent folders, starting from the folder containing api-extractor.json, and stopping at the first folder\r\n   * that contains a tsconfig.json file.  If a tsconfig.json file cannot be found in this way, then an error\r\n   * will be reported.\r\n   *\r\n   * SUPPORTED TOKENS: <lookup>\r\n   * DEFAULT VALUE: \"<lookup>\"\r\n   */\r\n  // \"projectFolder\": \"..\",\r\n\r\n  /**\r\n   * (REQUIRED) Specifies the .d.ts file to be used as the starting point for analysis.  API Extractor\r\n   * analyzes the symbols exported by this module.\r\n   *\r\n   * The file extension must be \".d.ts\" and not \".ts\".\r\n   *\r\n   * The path is resolved relative to the folder of the config file that contains the setting; to change this,\r\n   * prepend a folder token such as \"<projectFolder>\".\r\n   *\r\n   * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>\r\n   */\r\n  \"mainEntryPointFilePath\": \"<projectFolder>/lib/types/index.d.ts\",\r\n\r\n  /**\r\n   * A list of NPM package names whose exports should be treated as part of this package.\r\n   *\r\n   * For example, suppose that Webpack is used to generate a distributed bundle for the project \"library1\",\r\n   * and another NPM package \"library2\" is embedded in this bundle.  Some types from library2 may become part\r\n   * of the exported API for library1, but by default API Extractor would generate a .d.ts rollup that explicitly\r\n   * imports library2.  To avoid this, we can specify:\r\n   *\r\n   *   \"bundledPackages\": [ \"library2\" ],\r\n   *\r\n   * This would direct API Extractor to embed those types directly in the .d.ts rollup, as if they had been\r\n   * local files for library1.\r\n   */\r\n  \"bundledPackages\": [],\r\n\r\n  /**\r\n   * Determines how the TypeScript compiler engine will be invoked by API Extractor.\r\n   */\r\n  \"compiler\": {\r\n    /**\r\n     * Specifies the path to the tsconfig.json file to be used by API Extractor when analyzing the project.\r\n     *\r\n     * The path is resolved relative to the folder of the config file that contains the setting; to change this,\r\n     * prepend a folder token such as \"<projectFolder>\".\r\n     *\r\n     * Note: This setting will be ignored if \"overrideTsconfig\" is used.\r\n     *\r\n     * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>\r\n     * DEFAULT VALUE: \"<projectFolder>/tsconfig.json\"\r\n     */\r\n    // \"tsconfigFilePath\": \"<projectFolder>/tsconfig.json\",\r\n    /**\r\n     * Provides a compiler configuration that will be used instead of reading the tsconfig.json file from disk.\r\n     * The object must conform to the TypeScript tsconfig schema:\r\n     *\r\n     * http://json.schemastore.org/tsconfig\r\n     *\r\n     * If omitted, then the tsconfig.json file will be read from the \"projectFolder\".\r\n     *\r\n     * DEFAULT VALUE: no overrideTsconfig section\r\n     */\r\n    // \"overrideTsconfig\": {\r\n    //   . . .\r\n    // }\r\n    /**\r\n     * This option causes the compiler to be invoked with the --skipLibCheck option. This option is not recommended\r\n     * and may cause API Extractor to produce incomplete or incorrect declarations, but it may be required when\r\n     * dependencies contain declarations that are incompatible with the TypeScript engine that API Extractor uses\r\n     * for its analysis.  Where possible, the underlying issue should be fixed rather than relying on skipLibCheck.\r\n     *\r\n     * DEFAULT VALUE: false\r\n     */\r\n    // \"skipLibCheck\": true,\r\n  },\r\n\r\n  /**\r\n   * Configures how the API report file (*.api.md) will be generated.\r\n   */\r\n  \"apiReport\": {\r\n    /**\r\n     * (REQUIRED) Whether to generate an API report.\r\n     */\r\n    \"enabled\": true,\r\n    /**\r\n     * The filename for the API report files.  It will be combined with \"reportFolder\" or \"reportTempFolder\" to produce\r\n     * a full file path.\r\n     *\r\n     * The file extension should be \".api.md\", and the string should not contain a path separator such as \"\\\" or \"/\".\r\n     *\r\n     * SUPPORTED TOKENS: <packageName>, <unscopedPackageName>\r\n     * DEFAULT VALUE: \"<unscopedPackageName>.api.md\"\r\n     */\r\n    // \"reportFileName\": \"<unscopedPackageName>.api.md\",\r\n\r\n    /**\r\n     * Specifies the folder where the API report file is written.  The file name portion is determined by\r\n     * the \"reportFileName\" setting.\r\n     *\r\n     * The API report file is normally tracked by Git.  Changes to it can be used to trigger a branch policy,\r\n     * e.g. for an API review.\r\n     *\r\n     * The path is resolved relative to the folder of the config file that contains the setting; to change this,\r\n     * prepend a folder token such as \"<projectFolder>\".\r\n     *\r\n     * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>\r\n     * DEFAULT VALUE: \"<projectFolder>/etc/\"\r\n     */\r\n     \"reportFolder\": \"<projectFolder>/temp/\"\r\n\r\n    /**\r\n     * Specifies the folder where the temporary report file is written.  The file name portion is determined by\r\n     * the \"reportFileName\" setting.\r\n     *\r\n     * After the temporary file is written to disk, it is compared with the file in the \"reportFolder\".\r\n     * If they are different, a production build will fail.\r\n     *\r\n     * The path is resolved relative to the folder of the config file that contains the setting; to change this,\r\n     * prepend a folder token such as \"<projectFolder>\".\r\n     *\r\n     * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>\r\n     * DEFAULT VALUE: \"<projectFolder>/temp/\"\r\n     */\r\n    // \"reportTempFolder\": \"<projectFolder>/temp/\"\r\n  },\r\n\r\n  /**\r\n   * Configures how the doc model file (*.api.json) will be generated.\r\n   */\r\n  \"docModel\": {\r\n    /**\r\n     * (REQUIRED) Whether to generate a doc model file.\r\n     */\r\n    \"enabled\": true,\r\n\r\n    /**\r\n     * The output path for the doc model file.  The file extension should be \".api.json\".\r\n     *\r\n     * The path is resolved relative to the folder of the config file that contains the setting; to change this,\r\n     * prepend a folder token such as \"<projectFolder>\".\r\n     *\r\n     * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>\r\n     * DEFAULT VALUE: \"<projectFolder>/temp/<unscopedPackageName>.api.json\"\r\n     */\r\n    \"apiJsonFilePath\": \"<projectFolder>/temp/<unscopedPackageName>.api.json\"\r\n  },\r\n\r\n  /**\r\n   * Configures how the .d.ts rollup file will be generated.\r\n   */\r\n  \"dtsRollup\": {\r\n    /**\r\n     * (REQUIRED) Whether to generate the .d.ts rollup file.\r\n     */\r\n    \"enabled\": true\r\n\r\n    /**\r\n     * Specifies the output path for a .d.ts rollup file to be generated without any trimming.\r\n     * This file will include all declarations that are exported by the main entry point.\r\n     *\r\n     * If the path is an empty string, then this file will not be written.\r\n     *\r\n     * The path is resolved relative to the folder of the config file that contains the setting; to change this,\r\n     * prepend a folder token such as \"<projectFolder>\".\r\n     *\r\n     * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>\r\n     * DEFAULT VALUE: \"<projectFolder>/dist/<unscopedPackageName>.d.ts\"\r\n     */\r\n    // \"untrimmedFilePath\": \"<projectFolder>/dist/<unscopedPackageName>.d.ts\",\r\n\r\n    /**\r\n     * Specifies the output path for a .d.ts rollup file to be generated with trimming for a \"beta\" release.\r\n     * This file will include only declarations that are marked as \"@public\" or \"@beta\".\r\n     *\r\n     * The path is resolved relative to the folder of the config file that contains the setting; to change this,\r\n     * prepend a folder token such as \"<projectFolder>\".\r\n     *\r\n     * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>\r\n     * DEFAULT VALUE: \"\"\r\n     */\r\n    // \"betaTrimmedFilePath\": \"<projectFolder>/dist/<unscopedPackageName>-beta.d.ts\",\r\n\r\n    /**\r\n     * Specifies the output path for a .d.ts rollup file to be generated with trimming for a \"public\" release.\r\n     * This file will include only declarations that are marked as \"@public\".\r\n     *\r\n     * If the path is an empty string, then this file will not be written.\r\n     *\r\n     * The path is resolved relative to the folder of the config file that contains the setting; to change this,\r\n     * prepend a folder token such as \"<projectFolder>\".\r\n     *\r\n     * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>\r\n     * DEFAULT VALUE: \"\"\r\n     */\r\n    // \"publicTrimmedFilePath\": \"<projectFolder>/dist/<unscopedPackageName>-public.d.ts\",\r\n\r\n    /**\r\n     * When a declaration is trimmed, by default it will be replaced by a code comment such as\r\n     * \"Excluded from this release type: exampleMember\".  Set \"omitTrimmingComments\" to true to remove the\r\n     * declaration completely.\r\n     *\r\n     * DEFAULT VALUE: false\r\n     */\r\n    // \"omitTrimmingComments\": true\r\n  },\r\n\r\n  /**\r\n   * Configures how the tsdoc-metadata.json file will be generated.\r\n   */\r\n  \"tsdocMetadata\": {\r\n    /**\r\n     * Whether to generate the tsdoc-metadata.json file.\r\n     *\r\n     * DEFAULT VALUE: true\r\n     */\r\n    // \"enabled\": true,\r\n    /**\r\n     * Specifies where the TSDoc metadata file should be written.\r\n     *\r\n     * The path is resolved relative to the folder of the config file that contains the setting; to change this,\r\n     * prepend a folder token such as \"<projectFolder>\".\r\n     *\r\n     * The default value is \"<lookup>\", which causes the path to be automatically inferred from the \"tsdocMetadata\",\r\n     * \"typings\" or \"main\" fields of the project's package.json.  If none of these fields are set, the lookup\r\n     * falls back to \"tsdoc-metadata.json\" in the package folder.\r\n     *\r\n     * SUPPORTED TOKENS: <projectFolder>, <packageName>, <unscopedPackageName>\r\n     * DEFAULT VALUE: \"<lookup>\"\r\n     */\r\n    // \"tsdocMetadataFilePath\": \"<projectFolder>/dist/tsdoc-metadata.json\"\r\n  },\r\n\r\n  /**\r\n   * Specifies what type of newlines API Extractor should use when writing output files.  By default, the output files\r\n   * will be written with Windows-style newlines.  To use POSIX-style newlines, specify \"lf\" instead.\r\n   * To use the OS's default newline kind, specify \"os\".\r\n   *\r\n   * DEFAULT VALUE: \"crlf\"\r\n   */\r\n  // \"newlineKind\": \"crlf\",\r\n\r\n  /**\r\n   * Configures how API Extractor reports error and warning messages produced during analysis.\r\n   *\r\n   * There are three sources of messages:  compiler messages, API Extractor messages, and TSDoc messages.\r\n   */\r\n  \"messages\": {\r\n    /**\r\n     * Configures handling of diagnostic messages reported by the TypeScript compiler engine while analyzing\r\n     * the input .d.ts files.\r\n     *\r\n     * TypeScript message identifiers start with \"TS\" followed by an integer.  For example: \"TS2551\"\r\n     *\r\n     * DEFAULT VALUE:  A single \"default\" entry with logLevel=warning.\r\n     */\r\n    \"compilerMessageReporting\": {\r\n      /**\r\n       * Configures the default routing for messages that don't match an explicit rule in this table.\r\n       */\r\n      \"default\": {\r\n        /**\r\n         * Specifies whether the message should be written to the the tool's output log.  Note that\r\n         * the \"addToApiReportFile\" property may supersede this option.\r\n         *\r\n         * Possible values: \"error\", \"warning\", \"none\"\r\n         *\r\n         * Errors cause the build to fail and return a nonzero exit code.  Warnings cause a production build fail\r\n         * and return a nonzero exit code.  For a non-production build (e.g. when \"api-extractor run\" includes\r\n         * the \"--local\" option), the warning is displayed but the build will not fail.\r\n         *\r\n         * DEFAULT VALUE: \"warning\"\r\n         */\r\n        \"logLevel\": \"warning\",\r\n\r\n        /**\r\n         * When addToApiReportFile is true:  If API Extractor is configured to write an API report file (.api.md),\r\n         * then the message will be written inside that file; otherwise, the message is instead logged according to\r\n         * the \"logLevel\" option.\r\n         *\r\n         * DEFAULT VALUE: false\r\n         */\r\n        \"addToApiReportFile\": true\r\n      }\r\n\r\n      // \"TS2551\": {\r\n      //   \"logLevel\": \"warning\",\r\n      //   \"addToApiReportFile\": true\r\n      // },\r\n      //\r\n      // . . .\r\n    },\r\n\r\n    /**\r\n     * Configures handling of messages reported by API Extractor during its analysis.\r\n     *\r\n     * API Extractor message identifiers start with \"ae-\".  For example: \"ae-extra-release-tag\"\r\n     *\r\n     * DEFAULT VALUE: See api-extractor-defaults.json for the complete table of extractorMessageReporting mappings\r\n     */\r\n    \"extractorMessageReporting\": {\r\n      \"default\": {\r\n        \"logLevel\": \"warning\",\r\n        \"addToApiReportFile\": true\r\n      }\r\n\r\n      // \"ae-extra-release-tag\": {\r\n      //   \"logLevel\": \"warning\",\r\n      //   \"addToApiReportFile\": true\r\n      // },\r\n      //\r\n      // . . .\r\n    },\r\n\r\n    /**\r\n     * Configures handling of messages reported by the TSDoc parser when analyzing code comments.\r\n     *\r\n     * TSDoc message identifiers start with \"tsdoc-\".  For example: \"tsdoc-link-tag-unescaped-text\"\r\n     *\r\n     * DEFAULT VALUE:  A single \"default\" entry with logLevel=warning.\r\n     */\r\n    \"tsdocMessageReporting\": {\r\n      \"default\": {\r\n        \"logLevel\": \"warning\"\r\n        // \"addToApiReportFile\": false\r\n      }\r\n\r\n      // \"tsdoc-link-tag-unescaped-text\": {\r\n      //   \"logLevel\": \"warning\",\r\n      //   \"addToApiReportFile\": true\r\n      // },\r\n      //\r\n      // . . .\r\n    }\r\n  }\r\n}\r\n",
    "babel.cjs.config.cjs": "const config = require(\"./babel.esm.config.cjs\");\nconfig.plugins.push(\"@babel/transform-modules-commonjs\");\nmodule.exports = config;\n",
    "babel.esm.config.cjs": "let fs = require(\"fs\");\nlet tsconf = eval(\"(()=>(\" + fs.readFileSync(\"tsconfig.json\", \"utf-8\") + \"))()\");\n\nlet aliases = {};\nfor (let k in tsconf.compilerOptions.paths) {\n    let v = tsconf.compilerOptions.paths[k];\n    aliases[k] = `./${v[0]}`; // /index.mjs`;\n}\n\nlet DEV_SETTINGS = {};\ntry {\n    DEV_SETTINGS = require(\"./DEV_SETTINGS.cjs\");\n} catch (e) {\n//    console.trace(`DEV_SETTINGS not loaded`, e.stack);\n}\nconst { DEV_BYPASS_AUTH } = DEV_SETTINGS;\n\nmodule.exports = {\n    presets: [],\n    plugins: [\n        [\n            \"inline-replace-variables\",\n            {\n                DEV_BYPASS_AUTH: DEV_BYPASS_AUTH,\n            },\n        ],\n        \"@babel/transform-typescript\",\n        [\n            \"@babel/plugin-proposal-decorators\",\n            { legacy: true },\n        ],\n        \"@babel/proposal-optional-chaining\",\n        \"@babel/proposal-class-properties\",\n        \"@babel/proposal-object-rest-spread\",\n        [\n            \"module-resolver\",\n            {\n                root: [\"./\"],\n                alias: aliases,\n            },\n        ],\n        // DON'T ADD @babel/transform-modules-commonjs here! It's added in babel.cjs.config.cjs!\n    ],\n};\n",
    "inprint.cjs": "//        ...require(\"JSON5\").parse(require(\"fs\").readFileSync(\"package.json\", \"utf-8\"))?.prettier,\n\nlet inprint_main;\ntry {\n\tinprint_main = require(\"./lib/cjs/inprint/main.js\").inprint\n} catch(e) {\n\tinprint_main = ()=> undefined;\n\tconsole.warn(`CODE00000000 Couldn't open ./lib/cjs/inprint/main.js - if its not yet compiled - ignore this warning!`);\n}\n\nmodule.exports = {\n    files: [\"src/**/*.{ts,cts,mts,tsx,js,jsx,cjs,mjs}\"],\n    inprint: inprint_main,\n    embeddedFeatures: \"first\",\n    forceProcessTermination: true,\n    prettierOpts: { filepath: __dirname, ...require(\"JSON5\").parse(require(\"fs\").readFileSync(\"package.json\", \"utf-8\"))?.prettier, parser:\"typescript\"},\n};\n",
    "my_wins.json": "{\r\n    \"x\": 0,\r\n    \"y\": 0,\r\n    \"height\": 100,\r\n    \"width\": 500,\r\n    \"wins\": {\r\n\t\t\"webstorm\":{\"app\":true, \"cmd\":\"D:\\\\ProgsReady\\\\IntellijIdeaUI\\\\bin\\\\idea64.exe\"},\r\n        \"watch\": { \"no_run\": false, \"cmd\":\"cls & npm run ycplmon & npm run watch\"},\r\n        \"ycplmon\": { \"no_run\": true, \"cmd\": \"cls & npm run ycplmon\"},\r\n        \"git_pull\": { \"no_run\": true, \"cmd\":\"git checkout -- src/cpl.json & git pull\"}\r\n    },\r\n    \"wins_DISABLED\": {\r\n        \"watch_gen\": { \"no_run\": true, \"cmd\": \"cls & npm run ycplmon &  watch_gen\"},\r\n        \"ycplmon\": { \"no_run\": true, \"cmd\": \"cls & npm run ycplmon &  npm run ycplmon\"},\r\n        \"tsc\": { \"no_run\": true, \"cmd\": \"cls & npm run ycplmon &  npm run ycplmon && tsc --watch\" },\r\n        \"verdaccio\": \"cls & npm run ycplmon &  verdaccio\",\r\n        \"git_status\": \"git status\",\r\n        \"ide_web\": {\"no_run\":true, \"cmd\":\"cls & npm run ycplmon & npm run ide_web\"},\r\n        \"yinstr\": { \"no_run\": true, \"cmd\":\"cls & npm run ycplmon & npm run yinstr:src\"},\r\n        \"clear_gen\": { \"no_run\": true, \"cmd\": \"cls & npm run ycplmon & rebuild_gen\" },\r\n        \"node\": { \"no_run\": true, \"cmd\": \"cls & npm run ycplmon & node\"}\r\n    }\r\n}",
    "prettier.config.cjs": "module.exports = {\r\n    tabWidth: 4,\r\n    printWidth: 150,\r\n    trailingComma: \"all\",\r\n};\r\n",
    "republish.bat": "npm run republish",
    "tsconfig-declarations.json": "{\r\n    \"compilerOptions\": {\r\n        /* Basic Options */\r\n        \"incremental\": false /* Enable incremental compilation */,\r\n        \"target\": \"ESNEXT\" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */,\r\n        \"module\": \"ESNEXT\" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,\r\n        // \"lib\": [],                             /* Specify library files to be included in the compilation. */\r\n        \"allowJs\": true /* Allow javascript files to be compiled. */,\r\n        \"checkJs\": false /* Report errors in .js files. */,\r\n        \"jsx\": \"react\" /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */,\r\n        \"declaration\": true /* Generates corresponding '.d.ts' file. */,\r\n        \"declarationMap\": true /* Generates a sourcemap for each corresponding '.d.ts' file. */,\r\n        \"sourceMap\": true /* Generates corresponding '.map' file. */,\r\n        // \"outFile\": \"./\",                       /* Concatenate and emit output to single file. */\r\n        \"declarationDir\": \"./lib/types\",\r\n        \"outDir\": \"./lib/types\" /* Redirect output structure to the directory. */,\r\n        // \"rootDir\": \"./\",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */\r\n        // \"composite\": true,                     /* Enable project compilation */\r\n        //    \"tsBuildInfoFile\": \"./temp/ts_incemental\",               /* Specify file to store incremental compilation information */\r\n        // \"removeComments\": true,                /* Do not emit comments to output. */\r\n        // \"noEmit\": true,                        /* Do not emit outputs. */\r\n        \"importHelpers\": true /* Import emit helpers from 'tslib'. */,\r\n        // \"downlevelIteration\": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */\r\n        \"isolatedModules\": true /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */,\r\n\r\n        /* Strict Type-Checking Options */\r\n        \"strict\": true /* Enable all strict type-checking options. */,\r\n        // \"noImplicitAny\": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */\r\n        // \"strictNullChecks\": true,              /* Enable strict null checks. */\r\n        // \"strictFunctionTypes\": true,           /* Enable strict checking of function types. */\r\n        // \"strictBindCallApply\": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */\r\n        // \"strictPropertyInitialization\": true,  /* Enable strict checking of property initialization in classes. */\r\n        // \"noImplicitThis\": true,                /* Raise error on 'this' expressions with an implied 'any' type. */\r\n        // \"alwaysStrict\": true,                  /* Parse in strict mode and emit \"use strict\" for each source file. */\r\n\r\n        /* Additional Checks */\r\n        // \"noUnusedLocals\": true,                /* Report errors on unused locals. */\r\n        // \"noUnusedParameters\": true,            /* Report errors on unused parameters. */\r\n        // \"noImplicitReturns\": true,             /* Report error when not all code paths in function return a value. */\r\n        // \"noFallthroughCasesInSwitch\": true,    /* Report errors for fallthrough cases in switch statement. */\r\n\r\n        /* Module Resolution Options */\r\n        \"moduleResolution\": \"node\" /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */,\r\n        // \"baseUrl\": \"./\",                       /* Base directory to resolve non-absolute module names. */\r\n        // \"paths\": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */\r\n        // \"rootDirs\": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */\r\n        // \"typeRoots\": [],                       /* List of folders to include type definitions from. */\r\n        // \"types\": [],                           /* Type declaration files to be included in compilation. */\r\n        // \"allowSyntheticDefaultImports\": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */\r\n        \"esModuleInterop\": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,\r\n        // \"preserveSymlinks\": true,              /* Do not resolve the real path of symlinks. */\r\n        // \"allowUmdGlobalAccess\": true,          /* Allow accessing UMD globals from modules. */\r\n\r\n        /* Source Map Options */\r\n        //\"sourceRoot\": \"src\",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */\r\n        // \"mapRoot\": \"\",                         /* Specify the location where debugger should locate map files instead of generated locations. */\r\n        // \"inlineSourceMap\": true,               /* Emit a single file with source maps instead of having a separate file. */\r\n        // \"inlineSources\": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */\r\n\r\n        /* Experimental Options */\r\n        // \"experimentalDecorators\": true,        /* Enables experimental support for ES7 decorators. */\r\n        // \"emitDecoratorMetadata\": true,         /* Enables experimental support for emitting type metadata for decorators. */\r\n\r\n        /* Advanced Options */\r\n        \"forceConsistentCasingInFileNames\": true /* Disallow inconsistently-cased references to the same file. */,\r\n        \"emitDeclarationOnly\": true\r\n    },\r\n    \"include\": [\"src/**/*\"]\r\n}\r\n",
    "tsconfig.json": "{\r\n    \"compilerOptions\": {\r\n        /* Basic Options */\r\n        \"incremental\": true /* Enable incremental compilation */,\r\n        \"target\": \"ES2015\" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */,\r\n        \"module\": \"commonjs\" /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,\r\n        // \"lib\": [],                             /* Specify library files to be included in the compilation. */\r\n        \"allowJs\": true /* Allow javascript files to be compiled. */,\r\n        \"checkJs\": false /* Report errors in .js files. */,\r\n        \"jsx\": \"react\" /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */,\r\n        \"declaration\": true /* Generates corresponding '.d.ts' file. */,\r\n        \"declarationMap\": true /* Generates a sourcemap for each corresponding '.d.ts' file. */,\r\n        \"sourceMap\": true /* Generates corresponding '.map' file. */,\r\n        // \"outFile\": \"./\",                       /* Concatenate and emit output to single file. */\r\n        \"declarationDir\": \"./lib/ts\",\r\n        \"outDir\": \"./lib/ts\" /* Redirect output structure to the directory. */,\r\n        // \"rootDir\": \"./\",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */\r\n        // \"composite\": true,                     /* Enable project compilation */\r\n        //    \"tsBuildInfoFile\": \"./temp/ts_incemental\",               /* Specify file to store incremental compilation information */\r\n        // \"removeComments\": true,                /* Do not emit comments to output. */\r\n        // \"noEmit\": true,                        /* Do not emit outputs. */\r\n        \"importHelpers\": true /* Import emit helpers from 'tslib'. */,\r\n        // \"downlevelIteration\": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */\r\n        \"isolatedModules\": true /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */,\r\n\r\n        /* Strict Type-Checking Options */\r\n        \"strict\": true /* Enable all strict type-checking options. */,\r\n        // \"noImplicitAny\": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */\r\n        // \"strictNullChecks\": true,              /* Enable strict null checks. */\r\n        // \"strictFunctionTypes\": true,           /* Enable strict checking of function types. */\r\n        // \"strictBindCallApply\": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */\r\n        // \"strictPropertyInitialization\": true,  /* Enable strict checking of property initialization in classes. */\r\n        // \"noImplicitThis\": true,                /* Raise error on 'this' expressions with an implied 'any' type. */\r\n        // \"alwaysStrict\": true,                  /* Parse in strict mode and emit \"use strict\" for each source file. */\r\n\r\n        /* Additional Checks */\r\n        // \"noUnusedLocals\": true,                /* Report errors on unused locals. */\r\n        // \"noUnusedParameters\": true,            /* Report errors on unused parameters. */\r\n        // \"noImplicitReturns\": true,             /* Report error when not all code paths in function return a value. */\r\n        // \"noFallthroughCasesInSwitch\": true,    /* Report errors for fallthrough cases in switch statement. */\r\n\r\n        /* Module Resolution Options */\r\n        \"moduleResolution\": \"node\" /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */,\r\n        // \"baseUrl\": \"./\",                       /* Base directory to resolve non-absolute module names. */\r\n        // \"paths\": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */\r\n        // \"rootDirs\": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */\r\n        // \"typeRoots\": [],                       /* List of folders to include type definitions from. */\r\n        // \"types\": [],                           /* Type declaration files to be included in compilation. */\r\n        // \"allowSyntheticDefaultImports\": true,  /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */\r\n        \"esModuleInterop\": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */,\r\n        // \"preserveSymlinks\": true,              /* Do not resolve the real path of symlinks. */\r\n        // \"allowUmdGlobalAccess\": true,          /* Allow accessing UMD globals from modules. */\r\n\r\n        /* Source Map Options */\r\n        //\"sourceRoot\": \"src\",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */\r\n        // \"mapRoot\": \"\",                         /* Specify the location where debugger should locate map files instead of generated locations. */\r\n        // \"inlineSourceMap\": true,               /* Emit a single file with source maps instead of having a separate file. */\r\n        // \"inlineSources\": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */\r\n\r\n        /* Experimental Options */\r\n        // \"experimentalDecorators\": true,        /* Enables experimental support for ES7 decorators. */\r\n        // \"emitDecoratorMetadata\": true,         /* Enables experimental support for emitting type metadata for decorators. */\r\n\r\n        /* Advanced Options */\r\n        \"forceConsistentCasingInFileNames\": true /* Disallow inconsistently-cased references to the same file. */\r\n    },\r\n    \"include\": [\"src/**/*\"]\r\n}\r\n",
    "tsdoc.json": "{\r\n  \"$schema\": \"https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json\",\r\n  \"extends\": [ \"@microsoft/api-extractor/extends/tsdoc-base.json\" ]\r\n}"
}